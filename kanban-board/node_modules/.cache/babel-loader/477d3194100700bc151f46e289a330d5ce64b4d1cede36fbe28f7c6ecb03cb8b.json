{"ast":null,"code":"import React,{useMemo}from'react';import{useBoard}from'../../context/BoardContext';import{Column}from'../Column/Column';import{PRIORITY_MAP}from'../../constants/priority';import'./Board.css';import{jsx as _jsx}from\"react/jsx-runtime\";export const Board=()=>{const{tickets,users,groupBy,sortBy}=useBoard();const groupedTickets=useMemo(()=>{const sorted=[...tickets].sort((a,b)=>{if(sortBy==='priority'){return b.priority-a.priority;}return a.title.localeCompare(b.title);});if(groupBy==='status'){const groups={'Todo':[],'In Progress':[],'Backlog':[],'Done':[],'Cancelled':[]};sorted.forEach(ticket=>{if(groups.hasOwnProperty(ticket.status)){groups[ticket.status].push(ticket);}else{groups['Backlog'].push(ticket);}});return groups;}if(groupBy==='user'){const groups={};users.forEach(user=>{groups[user.id]=sorted.filter(ticket=>ticket.userId===user.id);});return groups;}if(groupBy==='priority'){const groups={};Object.keys(PRIORITY_MAP).forEach(priority=>{groups[priority]=sorted.filter(ticket=>ticket.priority===parseInt(priority));});return groups;}return{};},[tickets,users,groupBy,sortBy]);const renderColumns=()=>{return Object.entries(groupedTickets).map(_ref=>{let[group,tickets]=_ref;return/*#__PURE__*/_jsx(Column,{title:group,tickets:tickets,users:users,icon:null// Add an icon if needed\n,groupBy:groupBy// Passed the grouping method to Column\n},group);});};return/*#__PURE__*/_jsx(\"div\",{className:\"board\",children:renderColumns()});};","map":{"version":3,"names":["React","useMemo","useBoard","Column","PRIORITY_MAP","jsx","_jsx","Board","tickets","users","groupBy","sortBy","groupedTickets","sorted","sort","a","b","priority","title","localeCompare","groups","forEach","ticket","hasOwnProperty","status","push","user","id","filter","userId","Object","keys","parseInt","renderColumns","entries","map","_ref","group","icon","className","children"],"sources":["C:/Users/ABHAY RAJ SINGH/Desktop/quickshell/kanban-board/src/components/Board/Board.jsx"],"sourcesContent":["import React, { useMemo } from 'react';\r\nimport { useBoard } from '../../context/BoardContext';\r\nimport { Column } from '../Column/Column';\r\nimport { PRIORITY_MAP } from '../../constants/priority';\r\nimport './Board.css';\r\n\r\nexport const Board = () => {\r\n  const { tickets, users, groupBy, sortBy } = useBoard();\r\n\r\n  const groupedTickets = useMemo(() => {\r\n    const sorted = [...tickets].sort((a, b) => {\r\n      if (sortBy === 'priority') {\r\n        return b.priority - a.priority;\r\n      }\r\n      return a.title.localeCompare(b.title);\r\n    });\r\n\r\n    if (groupBy === 'status') {\r\n      const groups = {\r\n        'Todo': [],\r\n        'In Progress': [],\r\n        'Backlog': [],\r\n        'Done': [],\r\n        'Cancelled': [],\r\n      };\r\n\r\n      sorted.forEach(ticket => {\r\n        if (groups.hasOwnProperty(ticket.status)) {\r\n          groups[ticket.status].push(ticket);\r\n        } else {\r\n          groups['Backlog'].push(ticket);\r\n        }\r\n      });\r\n\r\n      return groups;\r\n    }\r\n\r\n    if (groupBy === 'user') {\r\n      const groups = {};\r\n      users.forEach(user => {\r\n        groups[user.id] = sorted.filter(ticket => ticket.userId === user.id);\r\n      });\r\n      return groups;\r\n    }\r\n\r\n    if (groupBy === 'priority') {\r\n      const groups = {};\r\n      Object.keys(PRIORITY_MAP).forEach(priority => {\r\n        groups[priority] = sorted.filter(\r\n          ticket => ticket.priority === parseInt(priority)\r\n        );\r\n      });\r\n      return groups;\r\n    }\r\n\r\n    return {};\r\n  }, [tickets, users, groupBy, sortBy]);\r\n\r\n  const renderColumns = () => {\r\n    return Object.entries(groupedTickets).map(([group, tickets]) => (\r\n      <Column\r\n        key={group}\r\n        title={group}\r\n        tickets={tickets}\r\n        users={users}\r\n        icon={null} // Add an icon if needed\r\n        groupBy={groupBy} // Passed the grouping method to Column\r\n      />\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      {renderColumns()}\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}